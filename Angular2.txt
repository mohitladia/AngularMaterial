function log(message){
    console.log(message);
}
var message = 'Hello World';
log(message);



//use of let 
function doSomething(){
    for(let i =0;i<5;i++){
        console.log(i);
    }

}
doSomething();
let message1;
message1 ='abc';


//TypeScript Assertion and variable declaration
let endsWithC = (<string>message1).endsWith('c');
let alternativeWay = (message1 as string).endsWith('c');
let a: any;
let b: boolean;
let c: any[] =[1,2,3];
a ='a';
a = 24;
const ColorRed = 0;
const ColorBlue = 1;
const ColorGreen = 2;
enum Color { Red =0 , blue =1 , Green=2};
let backgroundColor = Color.blue;

//ArrayFunctions

//In javaScript
let log1 = function(message){
    console.log(message);
}

//In Transcript
let doLog =(message) => {
    console.log(message);
}

//In Transcript
let doLogWithoutParam =() => {
    console.log();
}

//TypeScript Interfaces
inteface Point {
x:numbeR,
y:number
}
let drawPoint = (point:Point) => {
    //....
} 
drawPoint({
    x:1,
    y:2
})

//TypeScript class
class Point {
    private x:number;
    private y:number;
    constructor(x?: number,y?: number){
        this.x=x;
        this.y=y;
    }
    drawforClass(){
        console.log('X: '+this.x+', Y: ' + this.y);
    }

    getDistance(another: Point){

    }
}
class Point {
    constructor(private x?: number,private y?: number){
    }
    drawforClass(){
        console.log('X: '+this.x+', Y: ' + this.y);
    }
    getDistance(another: Point){
    }
}
let point= new Point();
point.drawforClass();

//Properties

export class Point {
    private x:number;
    private y:number;
    constructor(x?: number,y?: number){
        this.x=x;
        this.y=y;
    }
    drawforClass(){
        console.log('X: '+this.x+', Y: ' + this.y);
    }

    getDistance(another: Point){

    }
    get X(){
        return this.x;
    }
    set X(value){
        if(value<0){
            throw new Error('Value cannnot be less than zero')
        }
        this.x = value;
    }
}
let point= new Point(1,2);
let x= point.X;
point.X=10;
point.drawforClass();

// Relative path to the current Folder and Modularity
import{Point} from './point'





let point= new Point(1,2);
let x= point.x;
point.x=10;
point.drawforClass();


export class LikeComponent{
constructor(public likesCount:number, public isSelected:boolean){

}
onClick(){
    this.likesCount+=(this.isSelected) ? 1 :-1 ;
    this.isSelected = !this.isSelected;
}
}


import{Point} from './point'
import {LikeComponent}from './like.component'



let component =new LikeComponent(10,true);
component.onClick();
console.log(`likesCount: ${component.likesCount} , isSelected: ${component.isSelected}`)

let point= new Point(1,2);
let x= point.x;
point.x=10;
point.drawforClass();

